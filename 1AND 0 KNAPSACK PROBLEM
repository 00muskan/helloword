#include <iostream>

using namespace std;
int knapSack(int W,int wt[],int val[],int n){
    if (n==0||W==0)
    return 0;
    if (wt[n - 1] > W)
        return knapSack(W, wt, val, n - 1);
 
    // Return the maximum of two cases:
    // (1) nth item included
    // (2) not included
    else
        return max(
            val[n - 1]
                + knapSack(W - wt[n - 1],
                           wt, val, n - 1),
            knapSack(W, wt, val, n - 1));
}
# another way to use the knapsack
# top down approach
int knapsack(int w,int wt,int val,int n){
int t[n+1][w+1]; // we take only changing variable 
for( int i=0;i<n+1;i++){
for(int j=0;j<w+1;j++){
t[i][j]=0;
}
}
if(wt[n-1]<w){
t[n][w]= max(val[n-1]+t[n-1][w-wt[n-1]],t[n-1][w]);
}
else{
  t[n][w]=t[n-1][w];
  }
return t[n][w];
}
# another way #choice diagram
int knapsack(int w,int wt,int val,int n){
int t[n+1][w+1]; 
int t[n+1][w+1]; // we take only changing variable 
for( int i=0;i<n+1;i++){
for(int j=0;j<w+1;j++){
t[i][j]=0;
}
}// we take only changing variable 
for( int i=0;i<n+1;i++){
for(int j=0;j<w+1;j++){

if(wt[i-1]<j){
t[i][j]= max(val[i-1]+t[i-1][i-wt[j-1]],t[i-1][j]);
}
else{
  t[i][j]=t[i-1][j];
  }
  }
  }
return t[n][w];
}

int main()
{
    int val[] = { 60, 100, 120 };
    int wt[] = { 10, 20, 30 };
    int W = 50;
    int n =3;
    cout << knapSack(W, wt, val, n);
    return 0;
}
